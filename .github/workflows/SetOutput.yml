name: Set-Output exploration

on:
  push:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2016, windows-2019, ubuntu-20.04]
    env:
      TILEDB_HOME: ${{ github.workspace }}
      TILEDB_GA_IMAGE_NAME: ${{ matrix.os }}
    steps:
      - name: 'set the output'
        id: initoutput
        shell: bash
        run: |
          echo "before setting output"
          echo "::set-output name=TILEDB_CI_SUCCESS::1"
          echo "after setting output"

      - name: Prepare git
        run: git config --global core.autocrlf false

      - uses: actions/checkout@v2

      - name: 'lnxrunner programmatic set output'
        id: progsetoutputlinux
        if: ${{ matrix.os == 'ubuntu-20.04' }}
        shell: bash
        run: |
          # should already be in github.workspace directory with repository checked out
          ls
          cd src/setoutput
          pwd
          ls
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release ..
          cmake --build .
          #which g++
          #g++ --version
          #g++ setoutput.cc -o setoutput.exe
          ./setoutput
        
      - name: 'winrunner programmatic set output'
        id: progsetoutputwindows
        if: ${{ (matrix.os == 'windows-2016') || (matrix.os == 'windows-2019') }}
        shell: powershell
        run: |
          # should already be in github.workspace directory with repository checked out
          $VSCategory = "Enterprise" # alternate 'Community'
          if ($env:TILEDB_GA_IMAGE_NAME -eq "windows-2016") {
            $env:Path += ";C:\Program Files (x86)\Microsoft Visual Studio\2017\${VSCategory}\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin"
            #$env:Path += ";C:\Program Files (x86)\Microsoft Visual Studio\2017\${VSCategory}\VC\auxiliary\build"
            #"C:\Program Files (x86)\Microsoft Visual Studio\2016\${VSCategory}\VC\Auxiliary\Build\vcvars64.bat"
          } elseif ($env:TILEDB_GA_IMAGE_NAME -eq "windows-2019") {
            $env:Path += ";C:\Program Files (x86)\Microsoft Visual Studio\2019\${VSCategory}\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin"
            #$env:Path += ";C:\Program Files (x86)\Microsoft Visual Studio\2019\${VSCategory}\VC\auxiliary\build"
            #"C:\Program Files (x86)\Microsoft Visual Studio\2019\${VSCategory}\VC\Auxiliary\Build\vcvars64.bat"
          }
          else {
            write-host "unexpected name, $env:TILEDB_GA_IMAGE_NAME"
            return -1
          }
          write-host $env:PATH
          ls
          cd src\setoutput
          cmd /c "cd"
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release ..
          cmake --build . --config Release
          #cl setoutput.cc
          .\Release\setoutput.exe
        
      - name: 'check the output'
        id: checkoutput
        shell: bash
        run: |
            echo A - ...TILEDB_CI_SUCCESS... - "${{ steps.initoutput.outputs.TILEDB_CI_SUCCESS }}"
            echo B - ...TILEDB_CI_SUCCESS... - ${{ steps.initoutput.outputs.TILEDB_CI_SUCCESS }}
            echo "...TILEDB_CI_W2016_SUCCESS... - ${{ steps.progsetoutputwindows.outputs.TILEDB_CI_W2016_SUCCESS }}"
            echo "...TILEDB_CI_W2019_SUCCESS... - ${{ steps.progsetoutputwindows.outputs.TILEDB_CI_W2019_SUCCESS }}"
            echo "...TILEDB_CI_U2004_SUCCESS... - ${{ steps.progsetoutputlinux.outputs.TILEDB_CI_U2004_SUCCESS }}"
            # tiledb_unit is configured to set a job-level variable TILEDB_CI_SUCCESS=1
            # following the test run. If this variable is not set, the build should fail.
            # see https://github.com/TileDB-Inc/TileDB/pull/1400 (5f0623f4d3)
            if [[ "${{ steps.initoutput.outputs.TILEDB_CI_SUCCESS }}" -ne 1 ]]; then
              #exit 1;
              echo "${{ steps.initoutput.outputs.TILEDB_CI_SUCCESS }} -ne 1"
            else
              echo "${{ steps.initoutput.outputs.TILEDB_CI_SUCCESS }} -eq 1"
            fi
            if [[ "${{ steps.progsetoutputwindows.outputs.TILEDB_CI_W2016_SUCCESS }}" -ne 1 ]]; then
              #exit 1;
              echo "${{ steps.progsetoutputwindows.outputs.TILEDB_CI_W2016_SUCCESS }} -ne 1"
            else
              echo "${{ steps.progsetoutputwindows.outputs.TILEDB_CI_W2016_SUCCESS }} -eq 1"
            fi
            if [[ "${{ steps.progsetoutputwindows.outputs.TILEDB_CI_W2019_SUCCESS }}" -ne 1 ]]; then
              #exit 1;
              echo "${{ steps.progsetoutputwindows.outputs.TILEDB_CI_W2019_SUCCESS }} -ne 1"
            else
              echo "${{ steps.progsetoutputwindows.outputs.TILEDB_CI_W2019_SUCCESS }} -eq 1"
            fi
            if [[ "${{ steps.progsetoutputlinux.outputs.TILEDB_CI_U2004_SUCCESS }}" -ne 1 ]]; then
              #exit 1;
              echo "${{ steps.progsetoutputlinux.outputs.TILEDB_CI_U2004_SUCCESS }} -ne 1"
            else
              echo "${{ steps.progsetoutputlinux.outputs.TILEDB_CI_U2004_SUCCESS }} -eq 1"
            fi

      - name: 'check the output again from powershell'
        id: checkoutput2
        shell: powershell
        run: |
            write-host echo A - ...TILEDB_CI_SUCCESS... - "${{ steps.initoutput.outputs.TILEDB_CI_SUCCESS }}"
            write-host echo B - ...TILEDB_CI_SUCCESS... - ${{ steps.initoutput.outputs.TILEDB_CI_SUCCESS }}
            write-host echo "...TILEDB_CI_W2016_SUCCESS... - ${{ steps.progsetoutputwindows.outputs.TILEDB_CI_W2016_SUCCESS }}"
            write-host echo "...TILEDB_CI_W2019_SUCCESS... - ${{ steps.progsetoutputwindows.outputs.TILEDB_CI_W2019_SUCCESS }}"
            write-host echo "...TILEDB_CI_U2004_SUCCESS... - ${{ steps.progsetoutputlinux.outputs.TILEDB_CI_U2004_SUCCESS }}"
            # tiledb_unit is configured to set a job-level variable TILEDB_CI_SUCCESS=1
            # following the test run. If this variable is not set, the build should fail.
            # see https://github.com/TileDB-Inc/TileDB/pull/1400 (5f0623f4d3)
            #~ if ( 1 -ne 1) {
              #~ write-host "1 -ne 1"
            #~ } else {
              #~ write-host "! 1 -ne 1, ???"
            #~ }
            #~ if ( ${{ steps.initoutput.outputs.TILEDB_CI_SUCCESS }} -ne 1 ) {
              #~ #exit 1;
              #~ write-host "${{ steps.initoutput.outputs.TILEDB_CI_SUCCESS }} -ne 1"
            #~ } else {
              #~ write-host "${{ steps.initoutput.outputs.TILEDB_CI_SUCCESS }} -eq 1"
            #~ }
            #~ if ( "${{ steps.progsetoutputwindows.outputs.TILEDB_CI_W2016_SUCCESS }}" -ne 1 ) {
              #~ #exit 1;
              #~ echo "${{ steps.progsetoutputwindows.outputs.TILEDB_CI_W2016_SUCCESS }} -ne 1"
            #~ } else {
              #~ echo "${{ steps.progsetoutputwindows.outputs.TILEDB_CI_W2016_SUCCESS }} -eq 1"
            #~ }
            #~ if ( "${{ steps.progsetoutputwindows.outputs.TILEDB_CI_W2019_SUCCESS }}" -ne 1 ) {
              #~ #exit 1;
              #~ echo "${{ steps.progsetoutputwindows.outputs.TILEDB_CI_W2019_SUCCESS }} -ne 1"
            #~ } else {
              #~ echo "${{ steps.progsetoutputwindows.outputs.TILEDB_CI_W2019_SUCCESS }} -eq 1"
            #~ }
            #~ if ( "${{ steps.progsetoutputlinux.outputs.TILEDB_CI_U2004_SUCCESS }}" -ne 1 ) {
              #~ #exit 1;
              #~ echo "${{ steps.progsetoutputlinux.outputs.TILEDB_CI_U2004_SUCCESS }} -ne 1"
            #~ } else {
              #~ echo "${{ steps.progsetoutputlinux.outputs.TILEDB_CI_U2004_SUCCESS }} -eq 1"
            #~ }

